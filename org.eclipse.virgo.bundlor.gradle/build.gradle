plugins {
	id 'groovy'
	id 'eclipse'
	id 'java-gradle-plugin'
	id 'maven-publish'
}

description = 'Bundlor Gradle Plugin'

eclipse {
	project {
		file.beforeMerged {
			project.natures.clear()
		}
		natures = [
			'org.eclipse.jdt.groovy.core.groovyNature',
			'org.eclipse.jdt.core.javanature'
		]
    }
}

//jar {
//	from "$rootDir/build-bundlor/resources/about"
//	from project(':org.eclipse.virgo.bundlor.ant').configurations.compile.collect {
//		it.isDirectory() ? it : zipTree(it)
//	}
//	from project(':org.eclipse.virgo.bundlor.ant').configurations.archives.allArtifacts.files.collect {
//		zipTree(it)
//	}
//	duplicatesStrategy 'exclude'
//	manifest {
//		attributes(
//			'Implementation-Version': version
//		)
//	}
//}

repositories {
	mavenCentral()
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
	def outputDir = file("$buildDir/$name")

	inputs.files sourceSets.main.runtimeClasspath
	outputs.dir outputDir

	doLast {
		outputDir.mkdirs()
		file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
	}
}

dependencies {
	compile localGroovy()
	compile project(':org.eclipse.virgo.bundlor')
    compile project(':org.eclipse.virgo.bundlor.blint')
	testCompile "junit:junit:${junitVersion}"
	// Add the classpath file to the test runtime classpath
	testRuntime files(createClasspathManifest)
}

gradlePlugin {
	plugins {
		bundlor {
			group = 'org.eclipse.virgo.bundlor'
			id = 'org.eclipse.virgo.bundlor'
			implementationClass = 'org.eclipse.virgo.bundlor.gradle.BundlorGradlePlugin'
		}
	}
}

publishing {
	repositories {
		mavenLocal()
	}
	publications {
		bundlorGradle(MavenPublication) {
			from components.java
			groupId 'org.eclipse.virgo.bundlor'
		}
	}
}

